
Create a Maven project skipping archetype selection
choose pom as package 
add mysql dependency in the pom.xml

1) Create module payment_module add parent project
2) create another module  order_module add parent project 

observe you are able to access all the mysql related classes in submodule




=============================
Create a Java Class BankAccount with fields 
like accountNumber,accountHolderName,balance...

The User Should be able to Build a BankAccount objects in different ways like

 BankAccount with just accountNumber
 BankAccount with just accountNumber and accountHolderName
 BankAccount with all the 3 fields
 
 Use The Static Nested Class and Object Reference and fluid design
 
 
 
 Store the Details of BankAccount in an Array and print the top N 
 accounts by Balance Amount
 
 
 ===========================
 
 Create a abstract java class Product with required attribute and create two subclasses
 named Textile and Grocery add appropriate attributes for them also
 
 
 Store the Product and its subclasses  in a Suitable collection class and retrieve the elements too.

 Sprint-1
 
 Create a Java Application to Store the Details of Doctor and each Doctors Patients in a Suitable Collection
 given a Doctor application should retrieve a list of his patients
 
 Sprint -2
 
 Create an Application to add/store appointment of Patient for a Doctor given a Date the doctors appointment should be printed
 ================
 
 Bank {
 
    String bankName ;
    List<Customer> custList
 
 }
 
 
 Customer {
 
    customerId;
    customerName;
    List<Bank> banks
 
 }
 
 
 Create a JDBC Application to store the details of Bank and Customer in different table 
 and using appropriate query  when a customerId is given should list bank accounts he holds
 same way given branchName it should list the customers of that branch
 
 ========================================
 
 
 1) Application receives log  in a csv format  consisting of date,time,Location severity(LOW,HIGH,NORMAL) and cause , 
need to store this data in a collection use streams API to achieve the following

1)  Messages  location wise and sorted by date
2) Messages by severity 
3) Messages with date and cause
4) Message whose severity is High

 
 
 
 invoices.stream().reduce((inv1, inv2) -> 
			inv1.getAmount() > inv2.getAmount() ? inv1 : inv2
		).ifPresent(maxInvoice -> 
			System.out.println("Invoice with max amount: " + maxInvoice)
		);
		
		double total =invoices.stream().reduce(10.0, (sum, inv) -> sum + inv.getAmount(), Double::sum);
		
		System.out.println("Total amount using reduce: " + total);
		
		System.out.println("Total amount of all invoices: " + 
			invoices.stream().mapToDouble(Invoice::getAmount).sum()
		);

		invoices.stream().map(e ->e.getCustomer()).reduce((c1, c2) -> c1 + ", " + c2)
			.ifPresent(customers -> System.out.println("Customers: " + customers));
		
		String customers =invoices.stream().map(e ->e.getCustomer()).reduce("custList:=>",(c1, c2) -> c1 + ", " + c2);
		
		System.out.println(customers);
 